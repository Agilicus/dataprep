name: CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    name: ubuntu-latest x ${{ matrix.python }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.7"]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Cache venv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-build-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Print tool versions
        run: |
          poetry run mypy --version 
          poetry run pylint --version 
          poetry run pytest --version 
          poetry run black --version

      - name: Check if the code is formatted
        run: poetry run black --check --quiet dataprep

      - name: Type check the project
        run: poetry run mypy dataprep

      - name: Test the project
        run: poetry run pytest --cov=dataprep dataprep/tests
        env:
          DATAPREP_BROWSER_TESTS: 0
          DATAPREP_CREDENTIAL_TESTS: 0
          DATAPREP_DATA_CONNECTOR_YELP_TOKEN: ""
          DATAPREP_DATA_CONNECTOR_YOUTUBE_TOKEN: ""

      - name: Style check the project
        run: poetry run pylint dataprep

      - uses: codecov/codecov-action@v2
        with:
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
          # path_to_write_report: ./coverage.xml

      - uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml

  docs-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true

      - name: Cache venv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-build-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Build docs
        run: poetry run sphinx-build -M html docs/source docs/build

      - name: Archive docs
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/build/html

  docs-deploy:
    runs-on: ubuntu-latest
    needs: docs-build
    if: ${{ github.ref == 'ref/heads/master' && github.event == 'push' }}
    steps:
      - name: Download docs
        uses: actions/download-artifact@v2
        with:
          name: docs

      - run: echo 'docs.dataprep.ai' > docs/build/html/CNAME

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: docs/build/html # The folder the action should deploy.
          clean-exclude: dev
